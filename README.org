#+AUTHOR: Fei Li <wizard@pursuetao.com>
#+STARTUP: logdone
* Computer Systems: A Programmer's Perspective

** A. Progress [1/12]

*** DONE 0. A Tour of Computer Systems
    CLOSED: [2019-01-15 Tue 20:43]
    :PROPERTIES:
    :CHAPTERS: 10
    :END:


*** TODO 1. Representing and Manipulating Information
    :PROPERTIES:
    :CHAPTERS: 15
    :END:


*** TODO 2. Machine-Level Representation of Programs
    :PROPERTIES:
    :CHAPTERS: 12
    :END:


*** TODO 3. Processor Architecture
    :PROPERTIES:
    :CHAPTERS: 6
    :END:


*** TODO 4. Optimizing Program Performance
    :PROPERTIES:
    :CHAPTERS: 15
    :END:


*** TODO 5. The Memory Hierarchy
    :PROPERTIES:
    :CHAPTERS: 7
    :END:


*** TODO 6. Linking
    :PROPERTIES:
    :CHAPTERS: 15
    :END:


*** TODO 7. Exceptional Control Flow
    :PROPERTIES:
    :CHAPTERS: 8
    :END:


*** TODO 8. Virtual Memory
    :PROPERTIES:
    :CHAPTERS: 12
    :END:


*** TODO 9. System-Level I/O
    :PROPERTIES:
    :CHAPTERS: 12
    :END:


*** TODO a. Network Programming
    :PROPERTIES:
    :CHAPTERS: 7
    :END:


*** TODO b. Concurrent Programming
    :PROPERTIES:
    :CHAPTERS: 8
    :END:


** B. Notes

*** 1. A Tour of Computer Systems

**** 计算机系统

     计算机系统是不仅仅只是**硬件**，系统是由**软件**和**硬件**互相交织的集合
     体。必须共同协作达到运行应用程序的最终目的。

     系统中所有的信息如磁盘文件、内存中的程序、内存中存放的用户数据和网络上传送
     的数据都是由一串比特表示的，区分不同的数据对象的唯一方式就是我们读到这些数
     据对象时的上下文。


**** 编译系统

     使用 od 程序来查看文本文件在不同的进制下表示内容。

     #+BEGIN_SRC
     od -tcd1 hello.c
     #+END_SRC

***** 为什么必须了解编译系统如何工作？

      1. 优化程序性能

      2. 理解链接时出现的错误

      3. 避免安全漏洞

         安全编程的第一步就是理解数据和控制信息存储在程序栈上的方式会引起的后果。


***** 编译流程

      汇编语言为不同的高级语言的不同编译器提供了通用的输出语言。

      #+BEGIN_EXAMPLE
      ---- hello.c 源代码

      >>>> 预编译器 cpp &处理代码中以「#」开头的文本
      ---- hello.i

      >>>> 编译器 ccl
      ---- hello.s 汇编文件

      >>>> 汇编器 as
      ---- hello.o 可重定位目标程序
      ---- printf.o
      
      >>>> 链接器 ld
      ---- hello 可执行文件
      #+END_EXAMPLE

     
**** 系统的硬件组成

***** Buses | 总线

      1. 一组电子管道，携带信息字节并负责在各个部件间传递

      2. 传送定长的字节块，如 32Bit，64Bit


***** I/O Devices | I/O 设备

      控制器是指 I/O 设备本身或者系统主板上的芯片组，适配器是指插在主板插槽上的卡。

      1. 用户输入，如鼠标，键盘
      2. 用户显示，如显示器
      3. 长期存储数据和程序，如磁盘


***** Main Memory | 主存

      临时存放设备，在处理器执行程序时，存放程序和程序处理的数据。
      在物理上，DRAM 芯片组成；在逻辑上，先行字节数组，没有字节都有唯一的索引。


***** Processor | 处理器

      解释（或执行）存储在主存中指令的引擎，其核心是一个大小为一字节的存储设备（寄存器）~程序计数器（PC）。

      任意时刻，PC 都指向主存中的某天机器语言指令（亦含有该指令的地址）。


**** 存储器层次结构

**** 操作系统管理硬件
     
     #+BEGIN_SRC EXAMPLE

     虚拟机 | Virtual Machine
     |
     |----操作系统 | Operating System
     |
     |----进程 | Process
          |
          |----指令集架构 | Insturction set architecture
          |    |
          |    |----处理器 | Processor
          |
          |----虚拟内存 | Virtual Memory
               |
               |----主存 | Main Memory
               |
               |----文件 | Files 
                    |
                    |----I/O 设备 | I/O Devices

     #+END_SRC

***** Processes | 进程

      进程就是操作系统对一个正在运行的程序的抽象。在一个系统中，可以同时进行多个
      进程，而每个进程都好像独占地使用所有硬件。


***** Threads | 线程

      一个进程实际只是一个控制流。在现代操作系统中，一个进程实际上由叫多个线程的
      执行单元组成。每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。


***** Virtual Memory | 虚拟内存

      一个抽象的概念，计算机中最重要的概念。为每个进程提供了一个假象，即每个进程
      都在独占的使用主存。每个进程看到的内存都是一致的，成为虚拟地址空间。


***** Files | 文件

      文件就是字节序列。向应用程序提供了一个统一的视图，来看待系统中可能含有的所
      有各种各样的 I/O 设备。


***** Network | 网络

      现代系统需要通过网络连接在一起，从一个单独的系统来看，网络可视为一个 I/O 
      设备。


      
**** Amdahl's Law

     当我们对系统的某个部分加速时，其对系统整体性能的影响取决于该部分的重要性和
     加速程度。

     要想显著加速整个系统，必须提升全系统中相当大的部分的速度。

     #+BEGIN_SRC EXAMPLE
     
     S = 1 / ((1-a) + a/k)

     a: 系统某部分所需执行时间与加速部分时间的比例
     k: 加速部分性能提升比例
     #+END_SRC


**** 并发和并行

***** Thread-Level Concurrency | 线程级并发

***** Instruction-Level Parallelism | 指令级并行

***** Single-Instruction, Multiple-Data (SIMD) Parallelism | 单指令多数据并行
