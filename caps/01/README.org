#+AUTHOR: Fei Li
#+EMAIL: wizard@pursuetao.com
* 计算机系统漫游

  *意识到高速缓存存储器存在的程序员能够利用高速缓存将程序的性能提高一个数量级*

  *程序员可利用对对整个存储器结构的理解来提高程序性能*

  *系统是硬件和软件系统相互交织的集合体，它们必须共同协作以达到运行应用程序的最终目的*

  *当我们对系统的某个部分加速时，其对系统整体性能的影响取决于该部分的重要性和加速程度*
  *要想显著加速整个系统，必须提成全系统中相当大的部分的速度*


** 当在系统上执行程序时系统发生了什么以及为什么会这样

*** 信息就是「位」+「上下文」

    #+BEGIN_SRC shell

    od -tcd1 hello.c
    
    #+END_SRC

    程序的声明周期是从一个源程序开始，即程序员通过编辑器创建并保存的文本文件。

    *系统中所有的信息——包括磁盘文件、内存中的程序、内存中存放的用户数据以及网络上传送的数据，都是由一串比特表示的。*
    *区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。*

    数字的机器表示方式与实际的整数和实数是不同的。它们是对真值的有限近似值，有时候会有意想不到的行为表现。


*** 程序被其他程序翻译成不同的格式

**** 预处理阶段

     #+BEGIN_EXAMPLE
     hello.c ----> cpp ----> hello.i
     #+END_EXAMPLE

**** 编译阶段

     #+BEGIN_EXAMPLE
     hello.i ----> ccl ----> hello.s
     #+END_EXAMPLE

**** 汇编阶段

     #+BEGIN_EXAMPLE
     hello.s ----> as ----> hello.o
     #+END_EXAMPLE

**** 链接阶段

     #+BEGIN_SRC 
     hello.o  ----> ld ----> hello
     printf.o
     #+END_SRC

*** 处理器读并解释储存在内存中的指令

    #+BEGIN_SRC shell
    > ./hello
    hello, world
    >
    #+END_SRC

**** 系统的硬件组成

***** 总线

      一组电子管道
      传送定长的字节块


***** I/O 设备

      控制器
      适配器


***** 主存

      临时存储设备，在处理器执行程序时，用来存放程序和程序处理的数据

      物理：DRAM
      逻辑：线性数组，从零开始


***** 中央处理器

      解释/执行存储在主存中指令的引擎

      核心是一个大小为一个字的存储设备/寄存器，称为「PC」
      *在任何时刻，PC 都指向主存中某条机器语言指令（即含有该条指令的地址）*

****** 加载

       从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容。


****** 存储

       从寄存器复制一个字节或一个字到主存的某个位置，以覆盖这个位置上原来的内容。


****** 操作

       把两个寄存器的内容复制到 ALU ，ALU 对这两个字做算术运算，并把结果存放到一个寄存器中，以覆盖该寄存器中原来的内容。


****** 跳转

       从指令本身中抽取一个字，并将这个字复制到 PC 中，以覆盖 PC 中原来的值。


**** 运行程序

     用户输入「./hello」，shell 程序将字符逐一读入寄存器，再把它存放到主存中。

     回车后，shell 执行一系列指令来加载可执行的 hello 文件，将 hello 目标文件中的代码和数据从磁盘复制到主存。
     *利用 DMA 技术，数据可以不通过处理器而直接从磁盘到达主存*

     一旦目标文件中的代码和数据被加载到主存，处理器就开启执行程序的 main 中的机器语言指令。
     这些指令将「hello, world\n」从主存复制到寄存器文件，再从寄存器文件中复制到显示设备，最终显示在屏幕上。



** 操作系统管理硬件
     
   操作系统有两个基本功能：
   1. 防止硬件被失控的应用程序滥用
   2. 向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备

*** 进程

    *进程是对处理器、主存和 I/O 设备的抽象*

    进程是操作系统对一个正在运行的程序的一种抽象。
    *并发运行*，是说一个进程的指令和另一个进程的指令是交错运行的。

    操作系统保持跟踪进程运行所需的所有状态信息，就是「上下文」。

    在任意时刻，单处理器系统都只能执行一个进程的代码。当操作系统决定要把控制权从当前进程转移到某一个新进程时，就会进行 *上下文切换* 。
    *保存当前进程的上下文、恢复新进程的上下文，然后将控制权传递到新进程。新进程就会从它上次停止的地方开始。*



*** 线程

    一个进程实际上可以由多个称为 *线程* 的执行单元组成
    每个线程都运行在进程的上下文中，并共享同样的代码和全局数据

    *多线程之间比多进程之间更容易共享数据*
    *线程一般来说都比进程更高效*
    *多线程也是一种是的程序可以运行得更快的方法*


*** 虚拟内存

    *虚拟内存是对主存和磁盘 I/O 设备的抽象*
    *虚拟内存为每个进程提供了一个假象，即每个进程都在独占地使用主存*

    *虚拟内存的基本思想：把一个进程虚拟内存的内容存储在磁盘上，然后用主存作为磁盘的高速缓存*

**** 虚拟内存布局结构

     - 程序代码和数据
     - 堆
     - 共享库
     - 栈
     - 内核虚拟内存


*** 文件

    *文件是对 I/O 设备的抽象*

    文件是字节序列，它向应用程序提供了一个统一的试图，来看待系统中可能含有的所有各式各样的 I/O 设备。

    *系统中所有的输入输出都是通过使用一组称为 Unix I/O 的系统函数调用读写文件来实现的*


** 并发和并行

   *并发* 是一个通用的概念，指一个同时具有多个活动的系统。
   *并行* 是指用并发来使一个系统运行得更快。

*** 线程级并发

    *多处理器*


*** 指令级并行

    *流水线*


*** 单指令、多数据并行

    *SIMD*

