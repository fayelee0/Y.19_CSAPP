#+AUTHOR: Fei Li
#+EMAIL: wizard@pursuetao.com
* 信息的表示和处理

  孤立地讲，单个的位不是非常有用。然而，当把位组合在一起，再加上 *某种解释* ，
  即赋予不同的可能位模式以含义，我们就能表示 *任何* *有限集合* 的元素。

  数字表示
  1. 无符号编码
  2. 补码编码
  3. 浮点数编码


* 信息存储

  大多数计算机使用 8 位的块，或者字节，作为最小的可寻址的内存单位，而不是访问内存中单独的位。

  *每台计算机都有一个字长，指明指针数据的标称大小*
  *虚拟地址是以这样的一个字来编码的，所以字长决定的最重要的系统参数就是虚拟地址空间的最大大小*

  使用确定大小的整数类型是程序员准确控制数据表示的最佳途径。
  ISCO C99 引入了一类数据类型，其数据大小是固定的，不随编译器和机器位置而变化。

  *二进制代码是不兼容的，二进制代码很少能在不同机器和操作系统组合之间移植*
  
  计算机系统的一个基本概念就是，从机器的角度来看，程序仅仅只是字节序列。
  机器没有关于原始源程序的任何信息，除了可能有些用来帮助调试的辅助表之外。

  逻辑运算符 *&&* 和 *||* 执行短路运算，如果第一个参数参与求值就能确定表达式的结果，
  那么逻辑运算符就不会对第二个参数求值。

** 字节顺序造成的问题

   1. 在不同类型的机器之间通过网络传送二进制数据时，一个常见的问题是当小端法机器产生的数据被发送到大端法机器或者反过来时，接收程序会发现，字里的字节成了反序的。

   2. 阅读表示整数数据的字节序列时字节顺序也很重要。

   3. 编写规避正常的类型系统的程序时。


** 整数表示

   *对大多数 C 语言的实现，处理同样字长的有符号数和无符号数之间的相互转换的一般规则是：数字可能会改变，但是位模式不变* 

   *当执行一个运算时，如果它的一个运算数是有符号的而另一个是无符号的，那么 C 语言会隐式地将有符号参数强制类型转换为无符号数，并假设这两个数都是非负的，来执行这个运算* 

   *从一个数据大小到另一个数据大小的转换，以及无符号和有符号数字之间的转换的相对顺序能够影响一个程序的行为*
   *C 语言执行扩展时，先改变大小，之后再完成从有符号到无符号的转换*

   许多无符号运算的细微特性，尤其是有符号数到无符号数的隐式转换，会导致错误或者漏洞的方式。
   *避免这类错误的一种方法就是绝不使用无符号数*
   /当我们想要把字仅仅看做是位的集合而没有任何数字意义时，无符号数值是非常有用的/

*** 无符号数编码

    最大值：[1111 .... 1111] = 2^w - 1
    最小值：[0000 .... 0000] = 0

    *每个介于 [0, 2^w - 1] 之间的数都有唯一一个 w 位的值编码*

    *zero extension*


*** 补码编码

    最大值：[0111 .... 1111] = 2^(w-1) - 1
    最小值：[1000 .... 0000] = -2^(w-1)

    *在可表示的取值范围内的每个数字都有一个唯一的 w 位的补码编码*

    *sign extension*


** 整数运算
